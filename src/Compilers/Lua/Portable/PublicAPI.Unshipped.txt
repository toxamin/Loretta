#nullable enable
Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptInterpolatedStrings.get -> bool
Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.LuaSyntaxOptions(bool acceptBinaryNumbers, bool acceptCCommentSyntax, bool acceptCompoundAssignment, bool acceptEmptyStatements, bool acceptCBooleanOperators, bool acceptGoto, bool acceptHexEscapesInStrings, bool acceptHexFloatLiterals, bool acceptOctalNumbers, bool acceptShebang, bool acceptUnderscoreInNumberLiterals, bool useLuaJitIdentifierRules, bool acceptBitwiseOperators, bool acceptWhitespaceEscape, bool acceptUnicodeEscape, Loretta.CodeAnalysis.Lua.ContinueType continueType, bool acceptIfExpression, bool acceptHashStrings, bool acceptInvalidEscapes, bool acceptLocalVariableAttributes, Loretta.CodeAnalysis.Lua.IntegerFormats binaryIntegerFormat, Loretta.CodeAnalysis.Lua.IntegerFormats octalIntegerFormat, Loretta.CodeAnalysis.Lua.IntegerFormats decimalIntegerFormat, Loretta.CodeAnalysis.Lua.IntegerFormats hexIntegerFormat, bool acceptTypedLua, bool acceptFloorDivision, bool acceptLuaJITNumberSuffixes, bool acceptNestingOfLongStrings, bool acceptInterpolatedStrings) -> void
Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.With(Tsu.Option<bool> acceptBinaryNumbers = default(Tsu.Option<bool>), Tsu.Option<bool> acceptCCommentSyntax = default(Tsu.Option<bool>), Tsu.Option<bool> acceptCompoundAssignment = default(Tsu.Option<bool>), Tsu.Option<bool> acceptEmptyStatements = default(Tsu.Option<bool>), Tsu.Option<bool> acceptCBooleanOperators = default(Tsu.Option<bool>), Tsu.Option<bool> acceptGoto = default(Tsu.Option<bool>), Tsu.Option<bool> acceptHexEscapesInStrings = default(Tsu.Option<bool>), Tsu.Option<bool> acceptHexFloatLiterals = default(Tsu.Option<bool>), Tsu.Option<bool> acceptOctalNumbers = default(Tsu.Option<bool>), Tsu.Option<bool> acceptShebang = default(Tsu.Option<bool>), Tsu.Option<bool> acceptUnderscoreInNumberLiterals = default(Tsu.Option<bool>), Tsu.Option<bool> useLuaJitIdentifierRules = default(Tsu.Option<bool>), Tsu.Option<bool> acceptBitwiseOperators = default(Tsu.Option<bool>), Tsu.Option<bool> acceptWhitespaceEscape = default(Tsu.Option<bool>), Tsu.Option<bool> acceptUnicodeEscape = default(Tsu.Option<bool>), Tsu.Option<Loretta.CodeAnalysis.Lua.ContinueType> continueType = default(Tsu.Option<Loretta.CodeAnalysis.Lua.ContinueType>), Tsu.Option<bool> acceptIfExpression = default(Tsu.Option<bool>), Tsu.Option<bool> acceptHashStrings = default(Tsu.Option<bool>), Tsu.Option<bool> acceptInvalidEscapes = default(Tsu.Option<bool>), Tsu.Option<bool> acceptLocalVariableAttributes = default(Tsu.Option<bool>), Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats> binaryIntegerFormat = default(Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats>), Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats> octalIntegerFormat = default(Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats>), Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats> decimalIntegerFormat = default(Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats>), Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats> hexIntegerFormat = default(Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats>), Tsu.Option<bool> acceptTypedLua = default(Tsu.Option<bool>), Tsu.Option<bool> acceptFloorDivision = default(Tsu.Option<bool>), Tsu.Option<bool> acceptLuaJITNumberSuffixes = default(Tsu.Option<bool>), Tsu.Option<bool> acceptNestingOfLongStrings = default(Tsu.Option<bool>), Tsu.Option<bool> acceptInterpolatedStrings = default(Tsu.Option<bool>)) -> Loretta.CodeAnalysis.Lua.LuaSyntaxOptions!
Loretta.CodeAnalysis.Lua.Syntax.NamedTypeSyntax
Loretta.CodeAnalysis.Lua.Syntax.NamedTypeSyntax.ColonToken.get -> Loretta.CodeAnalysis.SyntaxToken
Loretta.CodeAnalysis.Lua.Syntax.NamedTypeSyntax.Identifier.get -> Loretta.CodeAnalysis.SyntaxToken
Loretta.CodeAnalysis.Lua.Syntax.NamedTypeSyntax.Type.get -> Loretta.CodeAnalysis.Lua.Syntax.TypeSyntax!
Loretta.CodeAnalysis.Lua.Syntax.NamedTypeSyntax.Update(Loretta.CodeAnalysis.SyntaxToken identifier, Loretta.CodeAnalysis.SyntaxToken colonToken, Loretta.CodeAnalysis.Lua.Syntax.TypeSyntax! type) -> Loretta.CodeAnalysis.Lua.Syntax.NamedTypeSyntax!
Loretta.CodeAnalysis.Lua.Syntax.NamedTypeSyntax.WithColonToken(Loretta.CodeAnalysis.SyntaxToken colonToken) -> Loretta.CodeAnalysis.Lua.Syntax.NamedTypeSyntax!
Loretta.CodeAnalysis.Lua.Syntax.NamedTypeSyntax.WithIdentifier(Loretta.CodeAnalysis.SyntaxToken identifier) -> Loretta.CodeAnalysis.Lua.Syntax.NamedTypeSyntax!
Loretta.CodeAnalysis.Lua.Syntax.NamedTypeSyntax.WithType(Loretta.CodeAnalysis.Lua.Syntax.TypeSyntax! type) -> Loretta.CodeAnalysis.Lua.Syntax.NamedTypeSyntax!
Loretta.CodeAnalysis.Lua.SyntaxKind.FloorDivideAssignmentStatement = 2114 -> Loretta.CodeAnalysis.Lua.SyntaxKind
Loretta.CodeAnalysis.Lua.SyntaxKind.NamedType = 2113 -> Loretta.CodeAnalysis.Lua.SyntaxKind
Loretta.CodeAnalysis.Lua.SyntaxKind.SlashSlashEqualsToken = 57 -> Loretta.CodeAnalysis.Lua.SyntaxKind
override Loretta.CodeAnalysis.Lua.LuaSyntaxRewriter.VisitNamedType(Loretta.CodeAnalysis.Lua.Syntax.NamedTypeSyntax! node) -> Loretta.CodeAnalysis.SyntaxNode?
override Loretta.CodeAnalysis.Lua.Syntax.NamedTypeSyntax.Accept(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor! visitor) -> void
override Loretta.CodeAnalysis.Lua.Syntax.NamedTypeSyntax.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>! visitor) -> TResult?
static Loretta.CodeAnalysis.Lua.SyntaxFactory.NamedType(Loretta.CodeAnalysis.SyntaxToken identifier, Loretta.CodeAnalysis.Lua.Syntax.TypeSyntax! type) -> Loretta.CodeAnalysis.Lua.Syntax.NamedTypeSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.NamedType(Loretta.CodeAnalysis.SyntaxToken identifier, Loretta.CodeAnalysis.SyntaxToken colonToken, Loretta.CodeAnalysis.Lua.Syntax.TypeSyntax! type) -> Loretta.CodeAnalysis.Lua.Syntax.NamedTypeSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.NamedType(string! identifier, Loretta.CodeAnalysis.Lua.Syntax.TypeSyntax! type) -> Loretta.CodeAnalysis.Lua.Syntax.NamedTypeSyntax!
virtual Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitNamedType(Loretta.CodeAnalysis.Lua.Syntax.NamedTypeSyntax! node) -> void
virtual Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>.VisitNamedType(Loretta.CodeAnalysis.Lua.Syntax.NamedTypeSyntax! node) -> TResult?
